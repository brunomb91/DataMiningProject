q()
sin(pi/2)
transformation_0_to_v1 <- function(theta_1, theta_2, theta_3) {
matrix <- as.matrix();
l1 = 0.21 * cos(theta_1) * cos(theta_2 + M_PI_2);
l2 = 0.21 * sin(theta_1) * cos(theta_2 + M_PI_2);
l3 = 0.21 * sin(theta_2 + M_PI_2) + 0.125;
# Transformation's first line
matrix[0][0] = -sin(theta_1); # a11
matrix[0][1] = -cos(theta_1) * cos(theta_2 + M_PI_2 + theta_3); # a12
matrix[0][2] = -cos(theta_1) * sin(theta_2 + M_PI_2 + theta_3); # a13
matrix[0][3] = -(cos(theta_1) * sin(theta_2 + M_PI_2 + theta_3)) * 0.075 + l1; # a14
# Transformation's second line
matrix[1][0] = cos (theta_1); # a21
matrix[1][1] = -sin(theta_1) * cos(theta_2 + M_PI_2 + theta_3); # a22
matrix[1][2] = -sin(theta_1) * sin(theta_2 + M_PI_2 + theta_3); # a23
matrix[1][3] = -(sin(theta_1) * sin(theta_2 + M_PI_2 + theta_3)) * 0.075 + l2; # a24
# Transformation's third line
matrix[2][0] = 0; # a31
matrix[2][1] = -sin(theta_2 + M_PI_2 + theta_3); # a32
matrix[2][2] = cos(theta_2 + M_PI_2 + theta_3); # a33
matrix[2][3] = cos(theta_2 + M_PI_2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[3][0] = 0; # a41
matrix[3][1] = 0; # a42
matrix[3][2] = 0; # a43
matrix[3][3] = 1; # a44
return (matrix);
}
transformation_0_to_v1(0,0,0)
transformation_0_to_v1 <- function(theta_1, theta_2, theta_3) {
matrix <- matrix();
l1 = 0.21 * cos(theta_1) * cos(theta_2 + M_PI_2);
l2 = 0.21 * sin(theta_1) * cos(theta_2 + M_PI_2);
l3 = 0.21 * sin(theta_2 + M_PI_2) + 0.125;
# Transformation's first line
matrix[0][0] = -sin(theta_1); # a11
matrix[0][1] = -cos(theta_1) * cos(theta_2 + M_PI_2 + theta_3); # a12
matrix[0][2] = -cos(theta_1) * sin(theta_2 + M_PI_2 + theta_3); # a13
matrix[0][3] = -(cos(theta_1) * sin(theta_2 + M_PI_2 + theta_3)) * 0.075 + l1; # a14
# Transformation's second line
matrix[1][0] = cos (theta_1); # a21
matrix[1][1] = -sin(theta_1) * cos(theta_2 + M_PI_2 + theta_3); # a22
matrix[1][2] = -sin(theta_1) * sin(theta_2 + M_PI_2 + theta_3); # a23
matrix[1][3] = -(sin(theta_1) * sin(theta_2 + M_PI_2 + theta_3)) * 0.075 + l2; # a24
# Transformation's third line
matrix[2][0] = 0; # a31
matrix[2][1] = -sin(theta_2 + M_PI_2 + theta_3); # a32
matrix[2][2] = cos(theta_2 + M_PI_2 + theta_3); # a33
matrix[2][3] = cos(theta_2 + M_PI_2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[3][0] = 0; # a41
matrix[3][1] = 0; # a42
matrix[3][2] = 0; # a43
matrix[3][3] = 1; # a44
return (matrix);
}
transformation_0_to_v1(0,0,0)
pi
transformation_0_to_v1 <- function(theta_1, theta_2, theta_3) {
matrix <- matrix();
l1 = 0.21 * cos(theta_1) * cos(theta_2 + pi/2);
l2 = 0.21 * sin(theta_1) * cos(theta_2 + pi/2);
l3 = 0.21 * sin(theta_2 + pi/2) + 0.125;
# Transformation's first line
matrix[0][0] = -sin(theta_1); # a11
matrix[0][1] = -cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a12
matrix[0][2] = -cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a13
matrix[0][3] = -(cos(theta_1) * sin(theta_2 + pi/2 + theta_3)) * 0.075 + l1; # a14
# Transformation's second line
matrix[1][0] = cos (theta_1); # a21
matrix[1][1] = -sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a22
matrix[1][2] = -sin(theta_1) * sin(theta_2 + pi/2 + theta_3); # a23
matrix[1][3] = -(sin(theta_1) * sin(theta_2 + pi/2 + theta_3)) * 0.075 + l2; # a24
# Transformation's third line
matrix[2][0] = 0; # a31
matrix[2][1] = -sin(theta_2 + pi/2 + theta_3); # a32
matrix[2][2] = cos(theta_2 + pi/2 + theta_3); # a33
matrix[2][3] = cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[3][0] = 0; # a41
matrix[3][1] = 0; # a42
matrix[3][2] = 0; # a43
matrix[3][3] = 1; # a44
return (matrix);
}
transformation_0_to_v1(0,0,0)
transformation_0_to_v1 <- function(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.21 * cos(theta_1) * cos(theta_2 + pi/2);
l2 = 0.21 * sin(theta_1) * cos(theta_2 + pi/2);
l3 = 0.21 * sin(theta_2 + pi/2) + 0.125;
# Transformation's first line
matrix[1, 1] = -sin(theta_1); # a11
matrix[1, 2] = -cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a12
matrix[1, 3] = -cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a13
matrix[1, 4] = -(cos(theta_1) * sin(theta_2 + pi/2 + theta_3)) * 0.075 + l1; # a14
# Transformation's second line
matrix[2, 1] = cos (theta_1); # a21
matrix[2, 2] = -sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a22
matrix[2, 3] = -sin(theta_1) * sin(theta_2 + pi/2 + theta_3); # a23
matrix[2, 4] = -(sin(theta_1) * sin(theta_2 + pi/2 + theta_3)) * 0.075 + l2; # a24
# Transformation's third line
matrix[3, 1] = 0; # a31
matrix[3, 2] = -sin(theta_2 + pi/2 + theta_3); # a32
matrix[3, 3] = cos(theta_2 + pi/2 + theta_3); # a33
matrix[3, 4] = cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
transformation_0_to_v1(0,0,0)
transformation_0_to_v1(0,pi/2,0)
transformation_0_to_v1(0,pi/2,pi/2)
transformation_0_to_v1(-pi,pi/2,pi/2)
transformation_0_to_v1(-pi,pi,pi/2)
transformation_0_to_v1(-pi,pi,0)
transformation_0_to_effector(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.075 * cos(theta_1) * sin(theta_2 + pi/2 + theta_3);
l2 = 0.075 * sin(theta_1) * cos(theta_2 + pi/2 + theta_3);
l3 = (-0.075) * cos(theta_2 + pi/2 + theta_3) + 0.125;
# Transformation's first line
matrix[1, 1] = cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a11
matrix[1, 2] = sin(theta_1); # a11
matrix[1, 3] = cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a13
matrix[1, 4] = (cos(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l1; # a14
# Transformation's second line
matrix[2, 1] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a21
matrix[2, 2] = -cos(theta_1); # a22
matrix[2, 3] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a23
matrix[2, 4] = (sin(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l2; # a24
# Transformation's third line
matrix[3, 1] = cos(theta_2 + pi/2 + theta_3); # a31
matrix[3, 2] = 0; # a32
matrix[3, 3] = sin(theta_2 + pi/2 + theta_3); # a33
matrix[3, 4] = 0.210 * cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
transformation_0_to_effector <- function(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.075 * cos(theta_1) * sin(theta_2 + pi/2 + theta_3);
l2 = 0.075 * sin(theta_1) * cos(theta_2 + pi/2 + theta_3);
l3 = (-0.075) * cos(theta_2 + pi/2 + theta_3) + 0.125;
# Transformation's first line
matrix[1, 1] = cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a11
matrix[1, 2] = sin(theta_1); # a11
matrix[1, 3] = cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a13
matrix[1, 4] = (cos(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l1; # a14
# Transformation's second line
matrix[2, 1] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a21
matrix[2, 2] = -cos(theta_1); # a22
matrix[2, 3] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a23
matrix[2, 4] = (sin(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l2; # a24
# Transformation's third line
matrix[3, 1] = cos(theta_2 + pi/2 + theta_3); # a31
matrix[3, 2] = 0; # a32
matrix[3, 3] = sin(theta_2 + pi/2 + theta_3); # a33
matrix[3, 4] = 0.210 * cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
View(matrix)
matrix = transformation_0_to_effector(0,0,pi/2)
View(matrix)
cos(0)
-cos(0)
sin(pi/2)
theta_1 = 0
theta_2 = 0
theta_3 = pi/2
theta_3
cos(theta_1) * sin(theta_2 + pi/2 + theta_3)
sin(theta_2 + pi/2 + theta_3)
theta_3 = 90
cos(theta_1) * sin(theta_2 + pi/2 + theta_3)
transformation_0_to_effector <- function(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.075 * cos(theta_1) * sin(theta_2 + 90 + theta_3);
l2 = 0.075 * sin(theta_1) * cos(theta_2 + 90 + theta_3);
l3 = (-0.075) * cos(theta_2 + 90 + theta_3) + 0.125;
# Transformation's first line
matrix[1, 1] = cos(theta_1) * sin(theta_2 + 90 + theta_3); # a11
matrix[1, 2] = sin(theta_1); # a11
matrix[1, 3] = cos(theta_1) * cos(theta_2 + 90 + theta_3); # a13
matrix[1, 4] = (cos(theta_1) * cos(theta_2 + 90 + theta_3)) * 0.210 + l1; # a14
# Transformation's second line
matrix[2, 1] = sin(theta_1) * cos(theta_2 + 90 + theta_3); # a21
matrix[2, 2] = -cos(theta_1); # a22
matrix[2, 3] = sin(theta_1) * cos(theta_2 + 90 + theta_3); # a23
matrix[2, 4] = (sin(theta_1) * cos(theta_2 + 90 + theta_3)) * 0.210 + l2; # a24
# Transformation's third line
matrix[3, 1] = cos(theta_2 + 90 + theta_3); # a31
matrix[3, 2] = 0; # a32
matrix[3, 3] = sin(theta_2 + 90 + theta_3); # a33
matrix[3, 4] = 0.210 * cos(theta_2 + 90 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
matrix = transformation_0_to_effector(0,0,pi/2)
matrix = transformation_0_to_effector(0,0,90)
sin(180)
sin(pi)
cos(pi)
cos(180)
sin(pi/2)
cos(pi/2)
cos(pi)
sin(pi)
sin(180)
cos(180)
transformation_0_to_effector <- function(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.075 * cos(theta_1) * sin(theta_2 + pi/2 + theta_3);
l2 = 0.075 * sin(theta_1) * cos(theta_2 + pi/2 + theta_3);
l3 = (-0.075) * cos(theta_2 + pi/2 + theta_3) + 0.125;
# Transformation's first line
matrix[1, 1] = cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a11
matrix[1, 2] = sin(theta_1); # a11
matrix[1, 3] = cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a13
matrix[1, 4] = (cos(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l1; # a14
# Transformation's second line
matrix[2, 1] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a21
matrix[2, 2] = -cos(theta_1); # a22
matrix[2, 3] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a23
matrix[2, 4] = (sin(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l2; # a24
# Transformation's third line
matrix[3, 1] = cos(theta_2 + pi/2 + theta_3); # a31
matrix[3, 2] = 0; # a32
matrix[3, 3] = sin(theta_2 + pi/2 + theta_3); # a33
matrix[3, 4] = 0.210 * cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
matrix = transformation_0_to_effector(0,0,90)
matrix = transformation_0_to_effector(0,0,pi/2)
View(matrix)
transformation_0_to_effector <- function(theta_1, theta_2, theta_3) {
matrix <- matrix(nrow = 4, ncol = 4);
l1 = 0.075 * cos(theta_1) * sin(theta_2 + pi/2 + theta_3);
l2 = 0.075 * sin(theta_1) * cos(theta_2 + pi/2 + theta_3);
l3 = (-0.075) * cos(theta_2 + pi/2 + theta_3) + 0.125;
# Transformation's first line
matrix[1, 1] = cos(theta_1) * sin(theta_2 + pi/2 + theta_3); # a11
matrix[1, 2] = sin(theta_1); # a11
matrix[1, 3] = cos(theta_1) * cos(theta_2 + pi/2 + theta_3); # a13
matrix[1, 4] = (cos(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l1; # a14
# Transformation's second line
matrix[2, 1] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a21
matrix[2, 2] = -cos(theta_1); # a22
matrix[2, 3] = sin(theta_1) * cos(theta_2 + pi/2 + theta_3); # a23
matrix[2, 4] = (sin(theta_1) * cos(theta_2 + pi/2 + theta_3)) * 0.210 + l2; # a24
# Transformation's third line
matrix[3, 1] = cos(theta_2 + pi/2 + theta_3); # a31
matrix[3, 2] = 0; # a32
matrix[3, 3] = sin(theta_2 + pi/2 + theta_3); # a33
matrix[3, 4] = 0.210 * cos(theta_2 + pi/2 + theta_3) + l3; # a34
# Transformation's fourth line
matrix[4, 1] = 0; # a41
matrix[4, 2] = 0; # a42
matrix[4, 3] = 0; # a43
matrix[4, 4] = 1; # a44
return (matrix);
}
transformation_0_to_effector(0,pi/2,0)
setwd("~/UFAL/Mineração/DataMiningProject")
library(lubridate)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(rattle)
library(randomForest)
library(caret)
library(Hmisc)
library(e1071)
library(corrplot)
library(dplyr)
# Importação da base de dados
data = read.csv('data/Dados_horários_do_monitoramento_da_qualidade_do_ar__MonitorAr.csv')
View(data)
summary(data)
data$Estação <- NULL
data$OBJECTID <- NULL
data$Data<- ymd_hms(data$Data)
data$Data <- as.POSIXct(data$Data,tz="UTC")
data$Chuva = ifelse(is.na(data$Chuva), mean(data$Chuva, na.rm = TRUE), data$Chuva)
data$Pres = ifelse(is.na(data$Pres), mean(data$Pres, na.rm = TRUE), data$Pres)
data$RS = ifelse(is.na(data$RS), mean(data$RS, na.rm = TRUE), data$RS)
data$Temp = ifelse(is.na(data$Temp), mean(data$Temp, na.rm = TRUE), data$Temp)
data$UR = ifelse(is.na(data$UR), mean(data$UR, na.rm = TRUE), data$UR)
data$Dir_Vento = ifelse(is.na(data$Dir_Vento), mean(data$Dir_Vento, na.rm = TRUE), data$Dir_Vento)
data$Vel_Vento = ifelse(is.na(data$Vel_Vento), mean(data$Vel_Vento, na.rm = TRUE), data$Vel_Vento)
data$SO2 = ifelse(is.na(data$SO2), mean(data$SO2, na.rm = TRUE), data$SO2)
data$NO2 = ifelse(is.na(data$NO2), mean(data$NO2, na.rm = TRUE), data$NO2)
data$HCNM = ifelse(is.na(data$HCNM), mean(data$HCNM, na.rm = TRUE), data$HCNM)
data$HCT = ifelse(is.na(data$HCT), mean(data$HCT, na.rm = TRUE), data$HCT)
data$CH4 = ifelse(is.na(data$CH4), mean(data$CH4, na.rm = TRUE), data$CH4)
data$CO = ifelse(is.na(data$CO), mean(data$CO, na.rm = TRUE), data$CO)
data$NO = ifelse(is.na(data$NO), mean(data$NO, na.rm = TRUE), data$NO)
data$NOx = ifelse(is.na(data$NOx), mean(data$NOx, na.rm = TRUE), data$NOx)
data$O3 = ifelse(is.na(data$O3), mean(data$O3, na.rm = TRUE), data$O3)
data$PM10 = ifelse(is.na(data$PM10), mean(data$PM10, na.rm = TRUE), data$PM10)
data$PM2_5 = ifelse(is.na(data$PM2_5), mean(data$PM2_5, na.rm = TRUE), data$PM2_5)
data$EstaÃ.Ã.o <- NULL
data$ï..OBJECTID <- NULL
data$X_UTM_Sirgas2000 <- NULL
data$Y_UTM_Sirgas2000 <- NULL
data$Lat <- NULL
data$Lon <- NULL
boxplot(data$UR)
mean(data$UR, na.rm = TRUE)
summary(data)
plot(data$Temp)
points(data$Temp, col = 'dark red')
cor(data$Chuva, data$Pres)
cor(data$Pres, data$Chuva)
cor(data$RS, data$Chuva)
cor(data$RS, data$Pres)
cor(data$Temp, data$Pres)
cor(data$Temp, data$RS)
cor(data$Temp, data$UR)
cor(data$Temp, data$Chuva)
cor(data$Temp, data$Dir_Vento)
cor(data$Temp, data$Vel_Vento)
cor(data$Dir_Vento, data$Vel_Vento)
cor(data$Pres, data$Vel_Vento)
cor(data$Pres, data$Chuva)
cor(data$Pres, data$Dir_Vento)
cor(data$Pres, data$RS)
cor(data$Pres, data$UR)
cor(data$Temp, data$UR)
cor(data$Temp, data$RS)
cor(data$Temp, data$Vel_Vento)
cor(data$Temp, data$SO2)
cor(data$Temp, data$NO2)
cor(data$Temp, data$HCNM)
cor(data$Temp, data$HCT)
cor(data$Temp, data$CH4)
cor(data$Temp, data$CO)
cor(data$Temp, data$NO)
cor(data$Temp, data$NOx)
cor(data$Temp, data$O3)
cor(data$Temp, data$PM10)
cor(data$Temp, data$PM2_5)
cor(data$PM10, data$PM2_5)
cor(data$NO, data$NOx)
cor(data$NO, data$NO2)
cor(data$NOx, data$NO2)
cor(data$HCT, data$HCNM)
ggplot()+geom_point(aes(x = data$NO, y=data$NOx))
ggplot()+geom_point(aes(x = data$NO, y=data$NO2), colour = 'red')+
# Plotando gr?ficos da base de dados
myplot1 <- ggplot(data,aes(Data))+geom_line(color="Red",aes(y=Temp))+ylab("Temperature")+xlab("Time")+
scale_x_datetime(labels=date_format("%H:%M"),
limits=as.POSIXct(c("2012-01-01 08:00:00","2012-02-01 08:00:00"),tz="UTC"))
a
ggplot(aes(data$NO))+geom_point(aes(y=data$NO2), colour = 'red')
ggplot()+geom_point(aes(y=data$NO2), colour = 'red')+
geom_point(aes(x=data$NO), colour = 'blue')
cor(data$Vel_Vento, data$PM10)
cor(data$Vel_Vento, data$PM2_5)
cor(data$Vel_Vento, data$CO)
cor(data$Vel_Vento, data$CH4)
cor(data$Vel_Vento, data$HCNM)
cor(data$Vel_Vento, data$SO2)
cor(data$Dir_Vento, data$SO2)
cor(data$Dir_Vento, data$NO2)
cor(data$Dir_Vento, data$HCNM)
cor(data$Dir_Vento, data$CH4)
cor(data$Dir_Vento, data$NO)
cor(data$Dir_Vento, data$CO)
cor(data$Dir_Vento, data$NOx)
cor(data$NO, data$NOx)
cor(data$Temp, data$NOx)
cor(data$Temp, data$NO)
cor(data$HCT, data$NO)
cor(data$HCT, data$NOx)
cor(data$HCT, data$NO2)
cor(data$HCT, data$SO2)
cor(data$HCT, data$CO)
cor(data$NOx, data$CO)
cor(data$NO2, data$CO)
cor(data$NO2, data$CH4)
cor(data$HCT, data$CH4)
cor(data$HCT, data$O3)
cor(data$HCT, data$PM10)
cor(data$HCT, data$NO)
cor(data$HCNM, data$CH4)
cor(data$HCNM, data$CO)
data[,3]
data[,1]
data[,20]
for(i in 3:20) {for(j in 3:20){cor(data[,i], data[,j])}}
a <- vector()
a <- as.vector()
a <- vector()
a[1] = 2
a[2] = 4
a <- vector()
for(i in 3:20) {for(j in 3:20){print(cor(data[,i], data[,j]))}}
for(i in 3:20) {for(j in 3:20){print(i, j, cor(data[,i], data[,j]))}}
for(i in 3:20) {for(j in 3:20){print(i);print(j);print(cor(data[,i], data[,j]))}}
for(i in 3:20) {
for(j in 3:20) {
if(cor(data[,i], data[,j])) {
print(i);print(j);print(cor(data[,i], data[,j]))
}
}
}
for(i in 3:20) {
for(j in 3:20) {
if(cor(data[,i], data[,j]) >= 0.4) {
print(i);print(j);print(cor(data[,i], data[,j]))
}
}
}
cor1 = ggplot()+geom_point(aes(x = data$NO, y=data$NO2))
cor2 = ggplot()+geom_point(aes(x = data$RS, y=data$O3))
cor3 = ggplot()+geom_point(aes(x = data$Temp, y=data$UR))
cor4 = ggplot()+geom_point(aes(x = data$Temp, y=data$RS))
cor5 = ggplot()+geom_point(aes(x = data$Temp, y=data$O3))
cor6 = ggplot()+geom_point(aes(x = data$Vel_Vento, y=data$O3))
cor6 = ggplot()+geom_point(aes(x = data$NO, y=data$NOx))
cor7 = ggplot()+geom_point(aes(x = data$NO2, y=data$NOx))
cor8 = ggplot()+geom_point(aes(x = data$HCT, y=data$HCNM))
cor9 = ggplot()+geom_point(aes(x = data$HCT, y=data$NO))
cor10 = ggplot()+geom_point(aes(x = data$HCT, y=data$NOx))
cor11 = ggplot()+geom_point(aes(x = data$NOx, y=data$HCNM))
cor12 = ggplot()+geom_point(aes(x = data$HCT, y=data$CH4))
cor13 = ggplot()+geom_point(aes(x = data$CH4, y=data$HCNM))
cor14 = ggplot()+geom_point(aes(x = data$CH4, y=data$NO))
cor15 = ggplot()+geom_point(aes(x = data$CH4, y=data$NOx))
cor1 <- ggplot_gtable(ggplot_build(cor1))
cor2 <- ggplot_gtable(ggplot_build(cor2))
cor3 <- ggplot_gtable(ggplot_build(cor3))
cor4 <- ggplot_gtable(ggplot_build(cor4))
cor5 <- ggplot_gtable(ggplot_build(cor5))
cor6 <- ggplot_gtable(ggplot_build(cor6))
cor7 <- ggplot_gtable(ggplot_build(cor7))
cor8 <- ggplot_gtable(ggplot_build(cor8))
cor9 <- ggplot_gtable(ggplot_build(cor9))
cor10 <- ggplot_gtable(ggplot_build(cor10))
cor11 <- ggplot_gtable(ggplot_build(cor11))
cor12 <- ggplot_gtable(ggplot_build(cor12))
cor13 <- ggplot_gtable(ggplot_build(cor13))
cor14 <- ggplot_gtable(ggplot_build(cor14))
cor15 <- ggplot_gtable(ggplot_build(cor15))
maxWidth_cor = unit.pmax(cor1$widths[2:3],
cor2$widths[2:3],
cor3$widths[2:3],
cor4$widths[2:3],
cor5$widths[2:3],
cor6$widths[2:3],
cor7$widths[2:3],
cor8$widths[2:3],
cor9$widths[2:3],
cor10$widths[2:3],
cor11$widths[2:3],
cor12$widths[2:3],
cor13$widths[2:3],
cor14$widths[2:3],
cor15$widths[2:3])
grid.arrange(cor1,cor2, cor3, cor4, cor5, cor6, cor7, cor8, cor9, cor10, cor11, cor12, cor13, cor14, cor15, ncol=2)
View(cor9)
cor(data$Temp,data$UR)
